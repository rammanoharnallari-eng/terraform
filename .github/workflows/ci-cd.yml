name: ci-cd

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: devops-practical
  IMAGE_TAG: ${{ github.sha }}

jobs:
  plan-apply:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout this (terraform) repo
        uses: actions/checkout@v4

      - name: Fetch application source (your repo)
        run: |
          rm -rf src
          git clone https://github.com/rammanoharnallari-eng/devops-practical-swimlane.git src

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get AWS account id
        id: sts
        run: echo "ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Docker image
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY >/dev/null 2>&1 ||             aws ecr create-repository --repository-name $ECR_REPOSITORY
          docker build -f docker/devops-practical.Dockerfile -t $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG ./src
          docker push $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init (remote backend)
        working-directory: terraform
        env:
          TF_VAR_image_repository: ${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}
          TF_VAR_image_tag: ${{ env.IMAGE_TAG }}
          TF_VAR_mongo_app_password: ${{ secrets.MONGO_APP_PASSWORD }}
        run: |
          terraform init -reconfigure             -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}"             -backend-config="key=envs/${{ github.ref_name }}/terraform.tfstate"             -backend-config="region=${{ env.AWS_REGION }}"             -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE }}"             -backend-config="encrypt=true"

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        working-directory: terraform
        env:
          TF_VAR_image_repository: ${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}
          TF_VAR_image_tag: ${{ env.IMAGE_TAG }}
          TF_VAR_mongo_app_password: ${{ secrets.MONGO_APP_PASSWORD }}
        run: terraform plan -input=false

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref_name == 'main'
        working-directory: terraform
        env:
          TF_VAR_image_repository: ${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}
          TF_VAR_image_tag: ${{ env.IMAGE_TAG }}
          TF_VAR_mongo_app_password: ${{ secrets.MONGO_APP_PASSWORD }}
        run: terraform apply -auto-approve -input=false
