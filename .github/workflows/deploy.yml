name: Build and Deploy to EKS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  id-token: write

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: devops-practical
  EKS_CLUSTER: swimlane-eks

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/devops-practical.Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        platforms: linux/amd64

  deploy:
    name: Deploy to EKS
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Terraform Init
      run: |
        cd terraform
        terraform init \
          -backend-config="bucket=terraform-state220785" \
          -backend-config="key=devops-practical-eks/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=terraform-state-locks" \
          -backend-config="encrypt=true"
    
    - name: Set default values for secrets
      run: |
        echo "MONGO_APP_PASSWORD=${MONGO_APP_PASSWORD:-defaultpassword123}" >> $GITHUB_ENV
        echo "GRAFANA_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}" >> $GITHUB_ENV
      env:
        MONGO_APP_PASSWORD: ${{ secrets.MONGO_APP_PASSWORD }}
        GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}

    - name: Terraform Plan
      run: |
        cd terraform
        # Extract the first tag from the multi-line output
        IMAGE_TAG=$(echo "${{ needs.build-and-push.outputs.image-tag }}" | head -n1)
        terraform plan \
          -var="image_repository=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}" \
          -var="image_tag=$IMAGE_TAG" \
          -var="mongo_app_password=${{ env.MONGO_APP_PASSWORD }}" \
          -var="grafana_admin_password=${{ env.GRAFANA_ADMIN_PASSWORD }}" \
          -out=tfplan
    
    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve tfplan
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}
    
    - name: Verify deployment
      run: |
        kubectl get pods -n apps
        kubectl get svc -n apps
        kubectl get pods -n data
        kubectl get pods -n monitoring

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:main
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'
        ignore-unfixed: true
    
    - name: Check if SARIF file exists
      id: check-sarif
      run: |
        if [ -f "trivy-results.sarif" ]; then
          echo "sarif-exists=true" >> $GITHUB_OUTPUT
        else
          echo "sarif-exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && steps.check-sarif.outputs.sarif-exists == 'true'
      with:
        sarif_file: 'trivy-results.sarif'
